# rules for ninja (ninja-build)

# 'uglifyjs' may be disabled running
#	NOMIN=1 ninja -v

MAJOR=1

rule cp
  command = cp $in $out

rule font
  command = echo "// abc2svg music font" > font.js;$
   echo -n "var musicfont = 'url(\"data:application/font-woff;base64," >> font.js;$
   base64 -w 0 abc2svg.woff >> font.js;$
   echo "\")'" >> font.js

rule font-gen
  command = fontforge -c 'open("font/abc2svg.sfd").generate("abc2svg.woff")'

rule jsc
  command = if [ -x /usr/bin/git -a -d .git ]; then$
	VERSION=`git describe`;$
	VERSION=$${VERSION#v};$
	DATE=`git log -1 --pretty=format:%ci HEAD | cut -d' ' -f1`;$
   else$
	VERSION=`grep '"version"' package.json|cut -d'"' -f4`;$
	DATE=`stat --printf=%y build.ninja | cut -d' ' -f1`;$
   fi;$
   cp core/license $out;$
   echo "var abc2svg={version:\"$$VERSION\",vdate:\"$$DATE\"}" >> $out;$
   if [ "x$$NOMIN" = "x" ]; then$
	cat $in | uglifyjs >> $out;$
   else$
	cat $in >> $out;$
   fi

rule jscu
  command = if [ -x /usr/bin/git -a -d .git ]; then$
	VERSION=`git describe`;$
	VERSION=$${VERSION#v};$
	DATE=`git log -1 --pretty=format:%ci HEAD | cut -d' ' -f1`;$
   else$
	VERSION=`grep '"version"' package.json|cut -d'"' -f4`;$
	DATE=`stat --printf=%y build.ninja | cut -d' ' -f1`;$
   fi;$
   cp core/license $out;$
   echo "// $out for abc2svg-$$VERSION ($$DATE)" >> $out;$
   if [ "x$$NOMIN" = "x" ]; then$
	uglifyjs $in >> $out;$
   else$
	cat $in >> $out;$
   fi

rule edit
  command = sed "$
s+@JS@+abc2svg-$MAJOR.js+;$
s+@MAJOR@+$MAJOR+;$
s+@PS@++$
" editor/edit.xhtml > edit-$MAJOR.xhtml;$
   sed "$
s+@JS@+abcps2svg-$MAJOR.js+;$
s+@MAJOR@+$MAJOR+;$
s+@PS@+ with PostScript+$
" editor/edit.xhtml > psedit-$MAJOR.xhtml;$
   if [ "x$$NOMIN" = "x" ]; then$
	sed "s+@MAJOR@+$MAJOR+" editor/edit.js | uglifyjs > edit-$MAJOR.js;$
   else$
	sed "s+@MAJOR@+$MAJOR+" editor/edit.js > edit-$MAJOR.js;$
   fi

build abc2svg.woff: font-gen | font/abc2svg.sfd
build font.js: font | abc2svg.woff

build abc2svg-$MAJOR.js: jsc core/abc2svg.js core/deco.js core/draw.js $
 font.js core/format.js core/front.js core/music.js core/parse.js core/subs.js $
 core/svg.js core/tune.js core/lyrics.js core/gchord.js core/tail.js | package.json

build abcps2svg-$MAJOR.js: jsc core/abc2svg.js core/deco.js core/draw.js $
 font.js core/format.js core/front.js core/music.js core/parse.js core/subs.js $
 core/svg.js core/tune.js core/lyrics.js core/gchord.js $
 core/wps.js core/psvg.js core/pstail.js | package.json

build edit-$MAJOR.css: cp editor/edit.css

build abcdoc-$MAJOR.js: jscu util/abcdoc.js | package.json
build abcemb-$MAJOR.js: jscu util/abcemb.js | package.json
build json-$MAJOR.js: jscu util/json.js | package.json
build midi-$MAJOR.js: jscu util/midi.js | package.json
build play-$MAJOR.js: jscu util/play.js util/toaudio.js util/toaudio5.js | package.json
build toaudio-$MAJOR.js: jscu util/toaudio.js | package.json

build edit-$MAJOR.xhtml psedit-$MAJOR.xhtml edit-$MAJOR.js: edit $
 editor/edit.xhtml editor/edit.js

build all: phony abc2svg-$MAJOR.js abcps2svg-$MAJOR.js abcdoc-$MAJOR.js $
 abcemb-$MAJOR.js json-$MAJOR.js midi-$MAJOR.js play-$MAJOR.js toaudio-$MAJOR.js $
 edit-$MAJOR.css edit-$MAJOR.js edit-$MAJOR.xhtml psedit-$MAJOR.xhtml

default all

# npm/git new release
# (needs 'npm set git-tag-version false')
rule version
  command = npm version $out;$
	tag=`grep '"version"' package.json|cut -d'"' -f4`;$
	git commit -a -m "New release v$$tag";$
	git tag -a v$$tag;$
	echo "*** Don't forget: git push --follow-tags; ninja build; npm publish"
build minor: version
build patch: version
